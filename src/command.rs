use crate::key::Key;
use serde::ser::{Serialize, SerializeStruct, Serializer};

#[derive(Debug)]
pub struct Command {
    id: u32,
    is_plugin: bool,
    shift: bool,
    ctrl: bool,
    alt: bool,
    key: Key,
    name: String,
    priority: u32,
}

impl Command {
    pub fn new(flag: u8, key: Key, id:u32, name: String) -> Command {
        let is_plugin = (flag & 0x80) != 0;
        let (name, priority) = get_command_name_priority(id, name);
        Command {
            id,
            is_plugin,
            shift: (flag & 0x01) != 0,
            ctrl: (flag & 0x02) != 0,
            alt: (flag & 0x04) != 0,
            key,
            name,
            priority,
        }
    }

    pub fn id(&self) -> u32 {
        self.id
    }

    pub fn priority(&self) -> u32 {
        self.priority
    }
}

impl Serialize for Command {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let mut s = serializer.serialize_struct("Command", 4)?;
        s.serialize_field("id", &self.id)?;
        s.serialize_field("is_plugin", &self.is_plugin)?;
        s.serialize_field("name", &self.name)?;
        s.serialize_field("key", &self.key.name())?;
        s.serialize_field("modifier", &(self.shift || self.ctrl || self.alt))?;
        s.serialize_field("shift", &self.shift)?;
        s.serialize_field("ctrl", &self.ctrl)?;
        s.serialize_field("alt", &self.alt)?;
        s.end()
    }
}

fn split_name(name: &str) -> Vec<&str> {
    let len = name.len();
    name[1..(len-1)].split("][").collect()
}

fn get_command_name_priority(id: u32, name: String) -> (String, u32) {
    match id {
        // ファイル
        5097 => (String::from("[ファイル][開く]"), 1001),
        5157 => (String::from("[ファイル][閉じる]"), 1002),
        5100 => (String::from("[ファイル][追加読み込み]"), 1003),
        5168 => (String::from("[ファイル][音声読み込み]"), 1004),
        5118 => (String::from("[ファイル][編集プロジェクトを開く]"), 1005),
        1023 => (String::from("[ファイル][編集プロジェクトの保存]"), 1006),
        1024 => (String::from("[ファイル][編集プロジェクトの上書き]"), 1007),
        1003 => (String::from("[ファイル][AVI出力]"), 1008),
        1062 => (String::from("[ファイル][WAV出力]"), 1009),
        // ファイル,プラグイン出力
        1025 => (String::from("[ファイル][バッチ出力]"), 1201),
        1009 => (String::from("[ファイル][出力の中断]"), 1202),
        5167 => (String::from("[ファイル][インポート][キーフレームリスト]"), 1301),
        // ファイル,インポート
        1054 => (String::from("[ファイル][エクスポート][キーフレームリスト]"), 1401),
        // ファイル,エクスポート
        1057 => (String::from("[ファイル][AVIファイル操作][AVIファイルの連結]"), 1501),
        1058 => (String::from("[ファイル][AVIファイル操作][AVIファイルの合成]"), 1502),
        1041 => (String::from("[ファイル][優先度][Highest]"), 1503),
        1040 => (String::from("[ファイル][優先度][High]"), 1504),
        1039 => (String::from("[ファイル][優先度][Normal]"), 1505),
        1038 => (String::from("[ファイル][優先度][Low]"), 1506),
        1037 => (String::from("[ファイル][優先度][Lowest]"), 1507),
        1042 => (String::from("[ファイル][優先度][Realtime]"), 1508),
        108 => (String::from("[ファイル][環境設定][システムの設定]"), 1509),
        109 => (String::from("[ファイル][環境設定][コーデックの設定]"), 1510),
        // 入力プラグインの設定
        1086 => (String::from("[ファイル][環境設定][入力プラグイン優先度の設定]"), 1701),
        102 => (String::from("[ファイル][環境設定][ショートカットキーの設定]"), 1702),
        106 => (String::from("[ファイル][環境設定][言語の設定 (Language)]"), 1703),
        111 => (String::from("[ファイル][環境設定][ウィンドウの位置を初期化]"), 1704),
        1002 => (String::from("[ファイル][終了]"), 1705),
        // フィルタ
        5183 => (String::from("[フィルタ][すべてのフィルタをOFFにする]"), 2401),
        // 設定
        5127 => (String::from("[設定][圧縮の設定][ビデオ圧縮の設定]"), 3601),
        5128 => (String::from("[設定][圧縮の設定][オーディオ圧縮の設定]"), 3602),
        5399 => (String::from("[設定][圧縮の設定][プラグイン出力の設定]"), 3603),
        5139 => (String::from("[設定][フィルタ順序の設定][ビデオフィルタ順序の設定]"), 3604),
        5181 => (String::from("[設定][フィルタ順序の設定][オーディオフィルタ順序の設定]"), 3605),
        // 編集
        1020 => (String::from("[編集][現在のフレームの画像をコピー]"), 4001),
        5117 => (String::from("[編集][現在のフレームに画像を貼り付け]"), 4002),
        1026 => (String::from("[編集][現在のフレームをクリップボードにコピー]"), 4003),
        5123 => (String::from("[編集][現在のフレームにクリップボードから貼り付け]"), 4004),
        1070 => (String::from("[編集][現在のフレームの出力イメージをクリップボードにコピー]"), 4005),
        5131 => (String::from("[編集][指定のフレームに移動]"), 4006),
        5115 => (String::from("[編集][選択範囲の指定]"), 4007),
        5184 => (String::from("[編集][選択範囲のフレームに画像を貼り付け]"), 4008),
        5143 => (String::from("[編集][選択範囲のフレーム切り出し]"), 4009),
        5101 => (String::from("[編集][選択範囲のフレーム削除]"), 4010),
        5147 => (String::from("[編集][元に戻す]"), 4011),
        5112 => (String::from("[編集][すべてのフレームを選択]"), 4012),
        5109 => (String::from("[編集][選択範囲を新しいプロファイルにする]"), 4013),
        5126 => (String::from("[編集][選択範囲を新しい圧縮の設定にする]"), 4014),
        5125 => (String::from("[編集][選択範囲のインターレース解除を指定]"), 4015),
        5196 => (String::from("[編集][現在のフレームのインターレース解除][標準]"), 4016),
        5197 => (String::from("[編集][現在のフレームのインターレース解除][反転]"), 4017),
        5198 => (String::from("[編集][現在のフレームのインターレース解除][奇数]"), 4018),
        5199 => (String::from("[編集][現在のフレームのインターレース解除][偶数]"), 4019),
        5200 => (String::from("[編集][現在のフレームのインターレース解除][二重化]"), 4020),
        5201 => (String::from("[編集][現在のフレームのインターレース解除][自動]"), 4021),
        5206 => (String::from("[編集][現在のフレームのプロファイル][標準プロファイル]"), 4022),
        5207 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[1]]"), 4023),
        5208 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[2]]"), 4024),
        5209 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[3]]"), 4025),
        5210 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[4]]"), 4026),
        5211 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[5]]"), 4027),
        5212 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[6]]"), 4028),
        5213 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[7]]"), 4029),
        5214 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[8]]"), 4030),
        5215 => (String::from("[編集][現在のフレームのプロファイル][プロファイル[9]]"), 4031),
        5129 => (String::from("[編集][現在のフレームをキーフレームにする]"), 4032),
        5132 => (String::from("[編集][現在のフレームを優先間引きフレームにする]"), 4033),
        5130 => (String::from("[編集][現在のフレームをマークする]"), 4034),
        5156 => (String::from("[編集][現在のフレームをコピーフレームにする]"), 4035),
        5398 => (String::from("[編集][再生速度の情報を変更]"), 4036),
        9002 => (String::from("[編集][基本機能][次のフレームに移動 (→)]"), 4037),
        9001 => (String::from("[編集][基本機能][前のフレームに移動 (←)]"), 4038),
        5142 => (String::from("[編集][基本機能][削除フレームを飛ばして次のフレームに移動 (↓)]"), 4039),
        5141 => (String::from("[編集][基本機能][削除フレームを飛ばして前のフレームに移動 (↑)]"), 4040),
        5396 => (String::from("[編集][基本機能][先頭のフレームに移動(Home)]"), 4041),
        5397 => (String::from("[編集][基本機能][先頭のフレームに移動(End)]"), 4042),
        5110 => (String::from("[編集][基本機能][現在のフレームを選択開始フレームにする ([)]"), 4043),
        5111 => (String::from("[編集][基本機能][現在のフレームを選択終了フレームにする (])]"), 4044),
        5103 => (String::from("[編集][基本機能][選択開始フレームに移動]"), 4045),
        5104 => (String::from("[編集][基本機能][選択終了フレームに移動]"), 4046),
        5174 => (String::from("[編集][基本機能][次のキーフレームに移動]"), 4047),
        5175 => (String::from("[編集][基本機能][前のキーフレームに移動]"), 4048),
        5178 => (String::from("[編集][基本機能][次のマークフレームに移動]"), 4049),
        5179 => (String::from("[編集][基本機能][前のマークフレームに移動]"), 4050),
        5176 => (String::from("[編集][基本機能][次のプロファイルの変更フレームに移動]"), 4051),
        5177 => (String::from("[編集][基本機能][前のプロファイルの変更フレームに移動]"), 4052),
        5170 => (String::from("[編集][基本機能][次のフレーム不連続点に移動]"), 4053),
        5171 => (String::from("[編集][基本機能][前のフレーム不連続点に移動]"), 4054),
        5187 => (String::from("[編集][基本機能][任意フレーム数次移動A (PageDown)]"), 4055),
        5188 => (String::from("[編集][基本機能][任意フレーム数前移動A (PageUp)]"), 4056),
        5189 => (String::from("[編集][基本機能][任意フレーム数次移動B]"), 4057),
        5190 => (String::from("[編集][基本機能][任意フレーム数前移動B]"), 4058),
        5191 => (String::from("[編集][基本機能][任意フレーム数次移動C]"), 4059),
        5192 => (String::from("[編集][基本機能][任意フレーム数前移動C]"), 4060),
        5193 => (String::from("[編集][基本機能][任意フレーム数次移動D]"), 4061),
        5194 => (String::from("[編集][基本機能][任意フレーム数前移動D]"), 4062),
        1099 => (String::from("[編集][基本機能][現在のフレームから再生ウィンドウで再生/停止]"), 4063),
        1090 => (String::from("[編集][基本機能][現在のフレーム番号をクリップボードにコピー]"), 4064),
        // プロファイル
        8001 => (String::from("[プロファイル][新しいプロファイルを作る]"), 5201),
        8002 => (String::from("[プロファイル][現在のプロファイルを削除する]"), 5202),
        8000 => (String::from("[プロファイル][現在のプロファイルを初期値に戻す]"), 5203),
        // 表示
        9200 => (String::from("[表示][拡大表示][25%]"), 6001),
        9201 => (String::from("[表示][拡大表示][50%]"), 6002),
        9202 => (String::from("[表示][拡大表示][100%]"), 6003),
        9203 => (String::from("[表示][拡大表示][200%]"), 6004),
        9204 => (String::from("[表示][拡大表示][300%]"), 6005),
        9205 => (String::from("[表示][拡大表示][400%]"), 6006),
        9206 => (String::from("[表示][拡大表示][WindowSize]"), 6007),
        9107 => (String::from("[表示][拡大表示][ズームイン]"), 6008),
        9108 => (String::from("[表示][拡大表示][ズームズームアウト]"), 6009),
        9116 => (String::from("[表示][拡大表示][ウィンドウサイズを自動変更]"), 6010),
        9104 => (String::from("[表示][オーディオ波形の表示]"), 6101),
        9114 => (String::from("[表示][時間の表示]"), 6102),
        9105 => (String::from("[表示][セーブ中もプレビュー表示]"), 6103),
        9115 => (String::from("[表示][セーブ中にデータレートを表示]"), 6104),
        9106 => (String::from("[表示][間引き予定フレームの表示]"), 6105),
        9110 => (String::from("[表示][再圧縮が必要なフレームの表示]"), 6106),
        9109 => (String::from("[表示][ソースファイルのキーフレーム表示]"), 6107),
        9113 => (String::from("[表示][常に手前に表示]"), 6401),
        9111 => (String::from("[表示][オーバーレイ表示]"), 6402),
        5144 => (String::from("[表示][セーブ中のみフィルタリングして表示]"), 6403),
        // その他
        1006 => (String::from("[その他][ファイルの情報]"), 7001),
        104 => (String::from("[その他][オーバーレイ情報]"), 7002),
        101 => (String::from("[その他][プラグインフィルタ情報]"), 7003),
        103 => (String::from("[その他][入力プラグイン情報]"), 7004),
        105 => (String::from("[その他][出力プラグイン情報]"), 7005),
        110 => (String::from("[その他][色変換プラグイン情報]"), 7006),
        107 => (String::from("[その他][言語拡張リソース情報]"), 7007),
        100 => (String::from("[その他][バージョン情報]"), 7101),
        20001 => (String::from("[その他][patch.aul]"), 7102),
        _ => {
            let elems = split_name(&name[..]);
            let priority = match elems.get(0) {
                None => 9001,
                Some(elem) => match *elem {
                    "ファイル" => match elems.get(1) {
                        None => 1999,
                        Some(elem) => match *elem {
                            "プラグイン出力" => 1101,
                            "インポート" => 1302,
                            "エクスポート" => 1402,
                            "入力プラグインの設定" => 1601,
                            _ => 1999,
                        },
                    },
                    "フィルタ" => 2001,
                    "設定" => 3001,
                    "編集" => 4101,
                    "プロファイル" => 5001,
                    "表示" => 6201,
                    "その他" => 7201,
                    _ => 9001,
                }
            };
            (name, priority)
        },
    }
}
